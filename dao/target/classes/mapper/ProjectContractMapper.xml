<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.niu.crm.dao.mapper.ProjectContractMapper" >
  <resultMap id="BaseResultMap" type="com.niu.crm.model.ProjectContract" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="con_id" property="conId" jdbcType="BIGINT" />
    
    <result column="con_value" property="conValue" jdbcType="DECIMAL" />
    <result column="con_discount" property="conDiscount" jdbcType="DECIMAL" />
    <result column="sk_value" property="skValue" jdbcType="DECIMAL" />
    <result column="first_sk_date" property="firstSkDate" jdbcType="TIMESTAMP" />
    <result column="gw_id" property="signGwId" jdbcType="BIGINT" />
    <result column="company_id" property="companyId" jdbcType="BIGINT" />
    <result column="memo" property="memo" jdbcType="VARCHAR" />
  </resultMap>
    
  <resultMap id="DTOResultMap" type="com.niu.crm.dto.ProjectContractDTO" extends="BaseResultMap">
    <result column="cstm_name" property="cstmName" jdbcType="VARCHAR" />
    <result column="con_no" property="conNo" jdbcType="VARCHAR" />
  </resultMap>
  
  <sql id="Base_Columns" >
    c.id,    c.con_id,     c.con_value,  c.con_discount,  c.sk_value, c.first_sk_date, 
    c.gw_id, c.company_id, c.memo
  </sql>
  
  <insert id="insert" parameterType="com.niu.crm.model.LxContract" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_project_contract (
    		con_id,    con_value, con_discount,  gw_id, company_id, memo)
    values (
       #{conId},    #{conValue}, #{conDiscount}, #{gwId},  #{companyId}, #{memo} )
  </insert>
  <update id="update" parameterType="com.niu.crm.model.LxContract" >
    update t_project_contract
       set con_value= #{conValue}, 
       	   con_discount= #{conDiscount}, 
       	   gw_id = #{gwId},
           company_id= #{companyId},
           memo = #{memo}
     where id = #{id}
  </update>
  
  <update id="updateSk" parameterType="com.niu.crm.model.LxContract" >
  	update t_project_contract
       set first_sk_date=#{firstSkDate},
           sk_value = #{skValue}
     where id = #{id}
  </update>
  
  <delete id="delete" parameterType="java.lang.Long" >
    delete from t_project_contract where id = #{id}
  </delete>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Columns" />
    from t_project_contract c
    where id=#{id}
  </select>
  
  <sql id="queryClause">
  	from t_customer a, t_project_customer b, t_cust_contract c, t_project_contract d
    where a.id=b.cstm_id and b.id =c.stu_id and c.id=d.con_id
    <if test="params.companyId != null" >
      and d.company_id = #{params.companyId}
    </if>
    <if test="params.conNo != null and params.conNo != '' " >
      and c.con_no like  #{params.conNo}
    </if>
    <if test="params.conTypes != null" >
      and d.con_type in 
		<foreach collection="params.conTypes" index="index" item="item" open="(" separator="," close=")">  
	       #{item}
	   </foreach>
    </if>
    <if test="params.signGwId != null " >
      and c.sign_gw_id =  #{params.signGwId}
    </if>
    <if test="params.gwId != null " >
      and d.gw_id =  #{params.gwId}
    </if>
    <if test="params.signTo != null " >
      and c.sign_date &lt; date_add(#{params.signTo}, interval 1 day)
    </if>
    <if test="params.status != null" >
      and c.status =  #{params.status}
    </if>
    
    <if test="params.aclClause != null and params.aclClause !='' " >
      ${params.aclClause}
    </if>
  </sql>  
  
  <select id="statContract" resultMap="DTOResultMap" >
    select sum(con_value) as con_value, sum(con_discount) as con_discount, sum(sk_value) as sk_value
    <include refid="queryClause"/>
  </select> 
  
  <select id="countContract" resultType="Integer">
    select count(*) 
    <include refid="queryClause"/>
  </select>
  
  <select id="queryContract" resultMap="DTOResultMap" >
    select 
      a.id as cstm_id, a.name as cstm_name, b.stu_from_id, b.stu_city, b.curr_school,
      c.id, c.stu_id, c.con_no, d.con_value,  d.con_discount, d.sk_value, 
      c.sign_gw_id, d.gw_id, c.sign_date, d.company_id, c.created_at, c.creator_id
    <include refid="queryClause"/>
    <if test="pager.sort != null">
		order by 
		<foreach collection="pager.sort" item="order" index="index" open="" separator="" close="">
		     ${order.property} ${order.direction}
		</foreach>
	</if>
	<if test="pager.sort ==null">
		order by c.created_at desc
	</if>		
	limit #{pager.offset}, #{pager.size}
  </select>   
</mapper>  