<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.niu.crm.dao.mapper.DictMapper" >
  <resultMap id="BaseResultMap" type="com.niu.crm.model.Dict" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="show_index" property="showIndex" jdbcType="BIGINT" />
    <result column="dict_code" property="dictCode" jdbcType="VARCHAR" />
    <result column="dict_name" property="dictName" jdbcType="VARCHAR" />
    <result column="dict_desc" property="dictDesc" jdbcType="VARCHAR" />
    <result column="keywords" property="keywords" jdbcType="VARCHAR" />
    <result column="parent_id" property="parentId" jdbcType="BIGINT" />
    <result column="creator_id" property="creatorId" jdbcType="BIGINT" />
    <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
    <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
  </resultMap>
  
  <sql id="Base_Columns" >
    id, dict_name, dict_desc, keywords, dict_code, show_index, parent_id, creator_id, created_at, updated_at
  </sql>
  
  <insert id="insert" parameterType="com.niu.crm.model.Dict" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_dict (dict_name, dict_desc, keywords, dict_code, show_index, parent_id, creator_id, created_at, updated_at)
       values (#{dictName}, #{dictDesc}, upper(#{keywords}),lower(#{dictCode}), #{showIndex}, #{parentId}, #{creatorId}, now(), now()
    )
  </insert>
  <update id="update" parameterType="com.niu.crm.model.Dict" >
    update t_dict
       set show_index = #{showIndex},
       	<if test="dictCode != null" >
        	dict_code = lower(#{dictCode}),
        </if>
           dict_name = #{dictName},
           dict_desc = #{dictDesc},
           keywords = upper(#{keywords}),
           parent_id = #{parentId},
           updated_at = now()
     where id = #{id}
  </update>
  
  <delete id="delete" parameterType="java.lang.Long" >
    delete from t_dict where id = #{id}
  </delete>
  
  <select id="selectById" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Columns" />
    from t_dict
    where id = #{id}
  </select>
  
  <select id="selectByCode" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Columns" />
    from t_dict
    where dict_code = lower(#{code})
  </select>

  <select id="selectChildren" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Columns" />
    from t_dict
    where 
    <if test="parentId != null" >
     parent_id = #{parentId}
    </if>
    <if test="parentId == null" >
     parent_id is null
    </if>
      order by show_index, dict_code
  </select>
  
  <select id="selectChildrenByCode" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Columns" />
    from t_dict
    where dict_code like lower(concat(#{parentCode},'.%'))
      order by show_index, dict_code
  </select>
  
  <select id="selectByName" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Columns" />
    from t_dict
    where dict_code like lower(concat(#{codePrefix},'%'))
      and dict_name = #{dictName}
  </select>
  
  <sql id="queryClause">
  	from t_dict d
    where 1=1
    <if test="params.parentId != null" >
      and d.parent_id = #{params.parentId}
    </if>
    <if test="params.keywords != null" >
      and ( dict_name like concat('%',#{params.keywords},'%') or d.keywords like concat('%',#{params.keywords},'%'))
    </if>
  </sql>  
  
  <select id="queryCount" resultType="Integer">
    select count(*) 
    <include refid="queryClause"/>
  </select>
  
  <select id="query" resultMap="BaseResultMap" >
    select
    <include refid="Base_Columns" />
    <include refid="queryClause"/>
    <if test="pager !=null and pager.sort != null">
		order by 
		<foreach collection="pager.sort" item="order" index="index" open="" separator="" close="">
		     ${order.property} ${order.direction}
		</foreach>
	</if>
	<if test="pager ==null or pager.sort ==null">
		order by d.show_index, d.dict_name
	</if>	
	<if test="pager !=null ">
		limit #{pager.offset}, #{pager.size}
	</if>
  </select>
</mapper>  