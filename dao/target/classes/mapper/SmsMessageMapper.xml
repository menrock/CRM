<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.niu.crm.dao.mapper.SmsMessageMapper" >
  <resultMap id="BaseResultMap" type="com.niu.crm.model.SmsMessage" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="stu_id" property="stuId" jdbcType="BIGINT" />
    <result column="mobile" property="mobile" jdbcType="VARCHAR" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="send_time" property="sendTime" jdbcType="TIMESTAMP" />
    <result column="creator_id" property="creatorId" jdbcType="BIGINT" />
    <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
    <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
  </resultMap>
  
  <sql id="Base_Columns" >
    id, stu_id, mobile, content, send_time, creator_id, created_at
  </sql>
  
  <insert id="insert" parameterType="com.niu.crm.model.SmsMessage" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_sms_message (stu_id, mobile, content, send_time, creator_id, created_at)
       values (#{stuId}, #{mobile}, #{content}, #{sendTime}, #{creatorId}, now()
    )
  </insert>
  
  <sql id="queryClause">
  	from t_sms_message m
    where 1=1
    <if test="params.creatorId !=null" >
      and creator_id = #{params.creatorId}
    </if>
    <if test="params.mobile !=null and params.mobile !=''" >
      and mobile like #{params.mobile}
    </if>
    <if test="params.createdFrom !=null" >
      and created_at &gt;= #{params.createdFrom}
    </if>
    <if test="params.createdTo !=null" >
      and created_at &lt;= #{params.createdTo}
    </if>
  </sql>
  
  <select id="countMessage" resultType="Integer" >
    select count(*) 
    <include refid="Base_Columns" />
    <include refid="queryClause"/>
    
  </select>
  
  
  <select id="queryMessage" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Columns" />
    <include refid="queryClause"/>
    <if test="pager.sort != null">
		order by 
		<foreach collection="pager.sort" item="order" index="index" open="" separator="" close="">
		     ${order.property} ${order.direction}
		</foreach>
	</if>
	<if test="pager.sort ==null">
		order by m.created_at desc
	</if>		
	limit #{pager.offset}, #{pager.size}
  </select>
  
  
</mapper>  