<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.niu.crm.dao.mapper.PaymentMapper" >
  <resultMap id="BaseResultMap" type="com.niu.crm.model.Payment" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="company_id" property="companyId" jdbcType="BIGINT" />
    <result column="pay_no" property="payNo" jdbcType="VARCHAR" />
    <result column="payer_name" property="payerName" jdbcType="VARCHAR" />
    <result column="bank_name" property="bankName" jdbcType="VARCHAR" />
    <result column="bill_no" property="billNo" jdbcType="VARCHAR" />
    <result column="cstm_id" property="cstmId" jdbcType="BIGINT" />
    <result column="inv_money" property="invMoney" jdbcType="DECIMAL" />
    <result column="pay_type" property="payType" jdbcType="BIGINT" />
    <result column="pay_type_name" property="payTypeName" jdbcType="VARCHAR" />
    <result column="paid_money" property="paidMoney" jdbcType="DECIMAL" />
    <result column="status" property="status" jdbcType="VARCHAR" />
    <result column="memo" property="memo" jdbcType="VARCHAR" />
    <result column="paid_at" property="paidAt" jdbcType="TIMESTAMP" />
    <result column="fz_confirmer_id" property="fzConfirmerId" jdbcType="BIGINT" />
    <result column="fz_confirmed_at" property="fzConfirmedAt" jdbcType="TIMESTAMP" />
    <result column="confirmer_id" property="confirmerId" jdbcType="BIGINT" />
    <result column="confirmed_at" property="confirmedAt" jdbcType="TIMESTAMP" />
    <result column="creator_id" property="creatorId" jdbcType="BIGINT" />
    <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
    <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
  </resultMap>
  
  <resultMap id="VOResultMap" type="com.niu.crm.vo.PaymentVO" extends="BaseResultMap">
    <result column="cstm_name" property="cstmName" jdbcType="VARCHAR" />
  </resultMap>
  
  <sql id="Base_Columns" >
    id, company_id, pay_no, payer_name, bank_name, bill_no, cstm_id, inv_money, 
    fz_confirmer_id, fz_confirmed_at, confirmer_id, confirmed_at, 
    pay_type, pay_type_name, paid_money, paid_at, status, memo, creator_id, created_at, updated_at
  </sql>
  
  <insert id="insert" parameterType="com.niu.crm.model.Payment" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_payment (
    		company_id, pay_no, payer_name,  bank_name,  bill_no, cstm_id, inv_money, 
    		pay_type, pay_type_name, paid_at, status, memo,   creator_id, created_at, updated_at)
    values (
          #{companyId}, #{payNo}, #{payerName}, #{bankName}, #{billNo}, #{cstmId}, #{invMoney}, 
          #{payType}, #{payTypeName}, #{paidAt}, #{status}, #{memo}, #{creatorId}, now(), now() )
  </insert>
  
  <update id="update" parameterType="com.niu.crm.model.Payment" >
    update t_payment
       set pay_no =#{payNo}, payer_name=#{payerName}, 
           bank_name =#{bankName},  bill_no =#{billNo}, 
           inv_money=#{invMoney},  pay_type=#{payType}, pay_type_name=#{payTypeName}, 
           paid_at=#{paidAt}, 
           memo = #{memo},  status=#{status}, updated_at = now()
     where id = #{id}
  </update>
  
  <update id="fzConfirm" parameterType="com.niu.crm.model.Payment" >
    update t_payment
       set status=#{status}, paid_money=inv_money, 
           fz_confirmer_id=#{fzConfirmerId}, fz_confirmed_at = now()
     where id = #{id} and status='SUBMIT'
  </update>
  
  <update id="confirm" parameterType="com.niu.crm.model.Payment" >
    update t_payment
       set status=#{status}, paid_money=inv_money, 
           confirmer_id=#{confirmerId}, confirmed_at = now()
     where id = #{id} and status='FZ_CONFIRMED'
  </update>
  
  <update id="fzRevoke" parameterType="com.niu.crm.model.Payment" >
    update t_payment
       set status=#{status}, 
           fz_confirmer_id=null, fz_confirmed_at =null
     where id = #{id} and status='FZ_CONFIRMED'
  </update>
  
  <update id="revoke" parameterType="com.niu.crm.model.Payment" >
    update t_payment
       set status=#{status}, paid_money=0, 
           confirmer_id=null, confirmed_at =null
     where id = #{id} and status='CONFIRMED'
  </update>
  
  <delete id="delete" parameterType="java.lang.Long" >
    delete from t_payment where id = #{id} and status in('DRAFT','SUBMIT')
  </delete>
  
  <select id="selectById" resultMap="VOResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Columns" />
    from t_payment c
    where id = #{id}
  </select>
  
  <select id="selectByCstmId" resultMap="VOResultMap" parameterType="java.lang.Long" >
    select 
      p.id, p.company_id, p.pay_no, p.payer_name, p.bank_name, p.bill_no, p.cstm_id, p.inv_money, 
      p.pay_type, p.pay_type_name, p.paid_money, p.paid_at, p.status, p.memo, 
      p.creator_id, p.created_at, p.updated_at,
      c.name as cstm_name
    from t_payment p, t_customer c 
    where p.cstm_id = c.id and c.cstm_id = #{cstmId}
  </select>
    
  <sql id="queryClause">
  	 from t_payment p, t_customer c 
    where p.cstm_id = c.id 
    <if test="params.cstmId != null" >
      and p.cstm_id = #{params.cstmId}
    </if>
    <if test="params.companyId != null" >
      and p.company_id = #{params.companyId}
    </if>
    <if test="params.payNo != null and params.payNo != '' " >
      and p.pay_no like  #{params.payNo}
    </if>
    <if test="params.payType != null and params.payType != '' " >
      and p.pay_type like #{params.payType}
    </if>
    <if test="params.billNo != null and params.billNo != '' " >
      and p.bill_no like  #{params.payNo}
    </if>
    <if test="params.cstmName != null and params.cstmName != '' " >
      and c.name like  #{params.cstmName}
    </if>
    <if test="params.creatorName != null and params.creatorName != '' " >
      and exists (select * from t_user where id=p.creator_id and name like #{params.creatorName} )
    </if>
    <if test="params.paidFrom != null" >
      and p.paid_at &gt;=  #{params.paidFrom}
    </if>
    <if test="params.paidTo != null" >
      and p.paid_at &lt;=  #{params.paidTo}
    </if>
    
    <if test="params.statusList != null and params.statusList.size >0" >
		and p.status in 
		<foreach collection="params.statusList" index="index" item="item" open="(" separator="," close=")">  
	       #{item}
	   </foreach>
	</if>
    
    <if test="params.aclClause != null and params.aclClause !='' " >
      ${params.aclClause}
    </if>
  </sql>  
  
  <select id="queryCount" resultType="Integer">
    select count(*) 
    <include refid="queryClause"/>
  </select>
  
  <select id="query" resultMap="VOResultMap" >
    select 
      p.id, p.company_id, p.pay_no, p.payer_name, p.bank_name, p.bill_no, p.cstm_id, p.inv_money, 
      p.pay_type, p.paid_money, p.paid_at, p.status, p.memo, 
      p.confirmer_id, p.confirmed_at, p.creator_id, p.created_at, p.updated_at,
      c.name as cstm_name
    <include refid="queryClause"/>
    <if test="pager.sort != null">
		order by 
		<foreach collection="pager.sort" item="order" index="index" open="" separator="" close="">
		     ${order.property} ${order.direction}
		</foreach>
	</if>
	<if test="pager.sort ==null">
		order by p.created_at desc
	</if>		
	limit #{pager.offset}, #{pager.size}
  </select> 
</mapper>  