<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.niu.crm.dao.mapper.LxPreCustMapper" >
  <resultMap id="BaseResultMap" type="com.niu.crm.model.LxPreCust" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="cstm_id" property="cstmId" jdbcType="BIGINT" />
    <result column="basic_info" property="basicInfo" jdbcType="VARCHAR" />
    <result column="stu_from_id" property="stuFromId" jdbcType="BIGINT" />
    <result column="gpa" property="gpa" jdbcType="VARCHAR" />
    
    <result column="px_require" property="pxRequire" jdbcType="VARCHAR" />
    
    <result column="current_specialty" property="currentSpecialty" jdbcType="VARCHAR" />
    <result column="hope_specialty" property="hopeSpecialty" jdbcType="VARCHAR" />
    <result column="curr_school" property="currSchool" jdbcType="VARCHAR" />
    <result column="curr_grade" property="currGrade" jdbcType="VARCHAR" />
    <result column="stu_xl" property="stuXl" jdbcType="VARCHAR" />
    <result column="plan_country" property="planCountry" jdbcType="VARCHAR" />
    <result column="plan_xl" property="planXl" jdbcType="VARCHAR" />
    <result column="plan_enter_year" property="planEnterYear" jdbcType="VARCHAR" />
    <result column="plan_enter_season" property="planEnterSeason" jdbcType="VARCHAR" />
    <result column="stu_city" property="stuCity" jdbcType="VARCHAR" />
    <result column="contact_count" property="contactCount" jdbcType="INTEGER" />
    <result column="last_contact_date" property="lastContactDate" jdbcType="TIMESTAMP" />
    <result column="status" property="status" jdbcType="VARCHAR" />
    <result column="company_id" property="companyId" jdbcType="BIGINT" />
    <result column="creator_id" property="creatorId" jdbcType="BIGINT" />
    <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
    <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
  </resultMap>
  
  <resultMap id="VOResultMap" type="com.niu.crm.vo.LxPreCustVO" extends="BaseResultMap">
    <association property="customer" javaType="com.niu.crm.model.Customer" >
    	<id property="id" column="cstm_id"/>
    	<result column="name" property="name" jdbcType="VARCHAR" />
    	<result column="gender" property="gender" jdbcType="VARCHAR" />
    	<result column="mobile" property="mobile" jdbcType="VARCHAR" />
    	<result column="phone" property="phone" jdbcType="VARCHAR" />
    	<result column="email" property="email" jdbcType="VARCHAR" />
    </association>
  </resultMap>
  
  <sql id="Base_Columns" >
    id, cstm_id, gpa, current_specialty, hope_specialty,
    stu_from_id, curr_school, curr_grade, 
    px_require, stu_xl, plan_country,plan_xl, plan_enter_year,plan_enter_season, stu_city, 
    contact_count, last_contact_date, basic_info, memo, 
    status, company_id, creator_id, created_at, updated_at
  </sql>
  
  <insert id="insert" parameterType="com.niu.crm.model.LxCustomer" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_lx_precust (cstm_id, gpa, current_specialty, hope_specialty,
        stu_from_id, curr_school, curr_grade,  basic_info, 
        px_require, stu_xl, plan_country, plan_xl,  plan_enter_year, plan_enter_season,  
        stu_city, status, company_id, memo, creator_id, created_at, updated_at)
       values (#{cstmId}, #{gpa}, #{currentSpecialty}, #{hopeSpecialty},
        #{stuFromId}, #{currSchool}, #{currGrade}, #{basicInfo}, 
        #{pxRequire}, #{stuXl}, #{planCountry}, #{planXl},  #{planEnterYear}, #{planEnterSeason}, 
        #{stuCity}, #{status}, #{companyId}, #{memo}, #{creatorId}, #{createdAt}, #{updatedAt} )
  </insert>
  
  <update id="update" parameterType="com.niu.crm.model.LxPreCust" >
    update t_lx_precust
       set px_require = #{pxRequire},
           basic_info = #{basicInfo},
           gpa = #{gpa},
           current_specialty = #{currentSpecialty},
           hope_specialty = #{hopeSpecialty},
           stu_from_id = #{stuFromId},
           curr_school = #{currSchool},
           curr_grade = #{currGrade},
           stu_xl = #{stuXl},
           plan_country = #{planCountry},
           plan_xl = #{planXl},
           plan_enter_year = #{planEnterYear},
           plan_enter_season = #{planEnterSeason},
           stu_city = #{stuCity},
           company_id = #{companyId},
           memo = #{memo},
           updated_at = now()
    where id = #{id}
  </update>
  
  <update id="updateByPrimaryKeySelective" parameterType="com.niu.crm.model.LxPreCust" >
    update t_lx_precust
    <set >
      <if test="cstmId != null" >
      	cstm_id = #{cstmId},
      </if>
      <if test="pxRequire != null" >
        px_require = #{pxRequire},
      </if>
      <if test="basicInfo != null" >
           basic_info = #{basicInfo},
      </if>
      <if test="gpa != null" >
           gpa = #{gpa},
      </if>
      
      <if test="currentSpecialty != null" >
        current_specialty = #{currentSpecialty},
      </if>
      <if test="hopeSpecialty != null" >
        hope_specialty = #{hopeSpecialty},
      </if>
      
      <if test="stuFromId != null" >
      	stu_from_id = #{stuFromId}, 
      </if>
      
      <if test="stuXl != null" >
        stu_xl = #{stuXl},
      </if>
      <if test="currSchool != null" >
        curr_school = #{currSchool},
      </if>   
      <if test="currGrade != null" >
        curr_grade = #{currGrade},
      </if>     
           
      <if test="planCountry != null" >
        plan_country = #{planCountry},
      </if>
      <if test="planXl != null" >
        plan_xl = #{planXl},
      </if>
      <if test="planEnterYear != null" >
        plan_enter_year = #{planEnterYear},
      </if>
      <if test="planEnterSeason != null" >
        plan_enter_season = #{planEnterSeason},
      </if>
      <if test="stuXl != null" >
        stu_xl = #{stuXl},
      </if>
      <if test="stuCity != null" >
        stu_city = #{stuCity},
      </if>
      <if test="companyId != null" >
        company_id = #{companyId},
      </if>
      <if test="memo != null" >
        memo = #{memo},
      </if>
      <if test="status != null" >
        status = #{status},
      </if>
      updated_at = now()
    </set>
    where id = #{id}
  </update>
  
  <update id="updateContactDate" >
    update t_lx_precust a
       set contact_count =#{contactCount},
       	   last_contact_date=#{lastContactDate}
     where cstm_id = #{cstmId}
  </update>
  
  <delete id="delete" parameterType="java.lang.Long" >
    delete from t_lx_precust where id = #{id}
  </delete>
  
  <select id="selectCstmIdById" resultType="Long" parameterType="java.lang.Long" >
    select cstm_id from t_lx_precust where id = #{id}
  </select>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Columns" />
    from t_lx_precust
    where id = #{id}
  </select>
  
  <select id="selectByCstmId" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Columns" />
    from t_lx_precust
    where cstm_id = #{cstmId}
  </select>
  
  <sql id="queryClause">
  	from t_lx_precust a left outer join t_dict dict on a.stu_from_id=dict.id, t_customer c
    where a.cstm_id=c.id and c.archive=false
    <if test="params.company_id != null" >
      and a.company_id = #{params.company_id}
    </if>
    <if test="params.stuFromCode != null" >
      and (dict.dict_code = #{params.stuFromCode} or dict.dict_code like concat(#{params.stuFromCode},'.%') )
    </if>
    <if test="params.stuFromIds != null and params.stuFromIds.length >0" >
		and a.stu_from_id in 
		<foreach collection="params.stuFromIds" index="index" item="item" open="(" separator="," close=")">  
	       #{item}
	   </foreach>
	</if>
    <if test="params.creator_id != null" >
      and a.creator_id = #{params.creator_id}
    </if>
    <if test="params.name != null and params.name !='' " >
      and c.name like #{params.name}
    </if>
    <if test="params.gender != null and params.gender !='' " >
      and c.gender = #{params.gender}
    </if>
    <if test="params.mobile != null and params.mobile !='' " >
      and c.mobile like #{params.mobile}
    </if>
    <if test="params.phone != null and params.phone !='' " >
      and (c.mobile like #{params.phone} or c.phone like #{params.phone})
    </if>
	<if test="params.statusList != null and params.statusList.size() >0" >
		and a.status in 
		<foreach collection="params.statusList" index="index" item="item" open="(" separator="," close=")">  
	       #{item}
	   </foreach>
	</if>
    <if test="params.country_codes != null" >
		and exists (select * from t_stu_plan_country where stu_id=a.id and country_code in 
		<foreach collection="params.country_codes" index="index" item="item" open="(" separator="," close=")">  
	       #{item}
	   </foreach>)
	</if>
	<if test="params.plan_xl != null" >
		and a.plan_xl in 
		<foreach collection="params.plan_xl" index="index" item="item" open="(" separator="," close=")">  
	       #{item}
	   </foreach>
	</if>
    <if test="params.curr_school != null " >
      and a.curr_school like concat('%',#{params.curr_school},'%')
    </if>
    <if test="params.created_from != null " >
      and a.created_at &gt;= #{params.created_from}
    </if>
    <if test="params.created_to != null " >
      and a.created_at &lt; date_add(#{params.created_to}, interval 1 day)
    </if>
    
    <if test="params.planEnterYear != null " >
      and a.plan_enter_year = #{params.planEnterYear}
    </if>
    
    <if test="params.planEnterSeason != null and params.planEnterSeason !='' " >
      and a.plan_enter_season = #{params.planEnterSeason}
    </if>
    
    <if test="params.exclude_cstm_ids != null and params.exclude_cstm_ids !='' " >
      and a.cstm_id not in (${params.params.exclude_cstm_ids})
    </if>
    
    <if test="params.aclClause != null and params.aclClause !='' " >
      ${params.aclClause}
    </if>
  </sql>  
  
  <select id="countPreCust" resultType="Integer">
    select count(*) 
    <include refid="queryClause"/>
  </select>
  
  <select id="queryPreCust" resultMap="VOResultMap" >
    select 
      a.id, a.cstm_id, a.gpa, a.current_specialty, a.hope_specialty,
      a.stu_xl, a.curr_school, a.curr_grade, a.plan_country, a.plan_xl, 
      a.plan_enter_year, a.plan_enter_season, a.stu_from_id,  
      a.stu_city, a.status, a.company_id, 
      c.name, c.gender, c.mobile, c.email, a.creator_id, a.created_at
    <include refid="queryClause"/>
    
    <if test="pager.sort != null">
		order by 
		<foreach collection="pager.sort" item="order" index="index" open="" separator="" close="">
		     ${order.property} ${order.direction}
		</foreach>
	</if>
	<if test="pager.sort ==null">
		order by a.created_at desc
	</if>		
	limit #{pager.offset}, #{pager.size}
  </select>
  
  <select id="queryRepeat" resultMap="VOResultMap" >
    select 
      	a.id, a.cstm_id,  a.gpa, a.current_specialty, a.hope_specialty,
      	a.stu_xl, a.curr_school, a.curr_grade, a.plan_country, a.plan_xl, 
      	a.plan_enter_year, a.plan_enter_season, a.stu_from_id, 
      	a.company_id, a.company_id, 
      	c.name, c.gender, c.mobile, c.phone, c.email, a.created_at, a.creator_id
      from t_lx_precust a , t_customer c
    where a.cstm_id=c.id and c.archive=false
      and exists (
        select * from t_cust_phone where cstm_id=c.id and phone in
		<foreach collection="phones" index="index" item="phone" open="(" separator="," close=")">  
	       #{phone}
	   </foreach>
      )
    <if test="excludeCstmId != null and excludeCstmId !='' " >
      and a.cstm_id != #{excludeCstmId}
    </if>
	limit 5
  </select> 
  
  <update id="changeCompany" >
    update t_lx_precust set company_id=#{toCompanyId} where company_id=#{fromCompanyId}
  </update> 
  
  <update id="changeStufrom" >
    update t_lx_precust set stu_from_id=#{toId} where stu_from_id=#{fromId}
  </update> 
  
</mapper>  