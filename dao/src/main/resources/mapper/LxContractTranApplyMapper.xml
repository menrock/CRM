<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.niu.crm.dao.mapper.LxContractTranApplyMapper" >
  <resultMap id="BaseResultMap" type="com.niu.crm.model.LxContractTranApply" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="lx_con_id" property="lxConId" jdbcType="BIGINT" />
    <result column="tran_type" property="tranType" jdbcType="INTEGER" />
    <result column="from_plan_gw_id" property="fromPlanGwId" jdbcType="BIGINT" />
    <result column="to_plan_gw_id" property="toPlanGwId" jdbcType="BIGINT" />
    <result column="from_apply_gw_id" property="fromApplyGwId" jdbcType="BIGINT" />
    <result column="to_apply_gw_id" property="toApplyGwId" jdbcType="BIGINT" />
    <result column="from_write_gw_id" property="fromWriteGwId" jdbcType="BIGINT" />
    <result column="to_write_gw_id" property="toWriteGwId" jdbcType="BIGINT" />
    <result column="from_service_gw_id" property="fromServiceGwId" jdbcType="BIGINT" />
    <result column="to_service_gw_id" property="toServiceGwId" jdbcType="BIGINT" />
    <result column="apply_memo" property="applyMemo" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="VARCHAR" />
    <result column="submit_time" property="submitTime" jdbcType="TIMESTAMP" />
    <result column="approved_time" property="approvedTime" jdbcType="TIMESTAMP" />
    <result column="approver_id" property="approverId" jdbcType="TIMESTAMP" />
    <result column="creator_id" property="creatorId" jdbcType="BIGINT" />
    <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
    <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
  </resultMap>
  
  <resultMap id="VOResultMap" type="com.niu.crm.vo.LxContractTranApplyVO" extends="BaseResultMap">
    <result column="company_id" property="companyId" jdbcType="BIGINT" />
    <result column="con_no" property="conNo" jdbcType="VARCHAR" />
    <result column="cstm_id" property="cstmId" jdbcType="BIGINT" />
  </resultMap>
  
  <sql id="Base_Columns" >
    a.id, a.tran_type,   a.lx_con_id,
    a.from_plan_gw_id,   a.to_plan_gw_id,    a.from_apply_gw_id,   a.to_apply_gw_id,
    a.from_write_gw_id,  a.to_write_gw_id,   a.from_service_gw_id, a.to_service_gw_id, 
    apply_memo, a.status, a.submit_time, a.approved_time, a.approver_id, 
    a.creator_id, a.created_at, a.updated_at
  </sql>
  
  <insert id="insert" parameterType="com.niu.crm.model.College" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into lx_contract_tran_apply (
        from_plan_gw_id,   to_plan_gw_id,    from_apply_gw_id,   to_apply_gw_id,
        from_write_gw_id,  to_write_gw_id,   from_service_gw_id, to_service_gw_id,
        tran_type,    apply_memo, status, lx_con_id,    creator_id, created_at, updated_at
    )values(
       #{fromPlanGwId},   #{toPlanGwId},    #{fromApplyGwId},   #{toApplyGwId},
       #{fromWriteGwId},  #{toWriteGwId},   #{fromServiceGwId}, #{toServiceGwId},
       #{tranType},  #{applyMemo},   #{status}, #{lxConId},  #{creatorId}, now(), now()
    )
  </insert>
  <update id="update" parameterType="com.niu.crm.model.LxContractTranApply" >
    update lx_contract_tran_apply
       set to_plan_gw_id = #{toPlanGwId},
           to_apply_gw_id = #{toApplyGwId},
           to_write_gw_id = #{toWriteGwId},
           to_service_gw_id = #{toServiceGwId},
           apply_memo = #{applyMemo},
           updated_at = now()
     where id = #{id}
  </update>
  
  
  <update id="submit" parameterType="com.niu.crm.model.LxContractTranApply" >
    update lx_contract_tran_apply
       set status = #{status},
           submit_time = now()
     where id = #{id}
  </update>
  
  
  <update id="approve" parameterType="com.niu.crm.model.LxContractTranApply" >
    update lx_contract_tran_apply
       set status = #{status},
           approver_id = #{approverId},
           approved_time = now()
     where id = #{id}
  </update>
  
  <delete id="delete" parameterType="java.lang.Long" >
    delete from lx_contract_tran_apply where id = #{id}
  </delete>
  
  <select id="selectByPrimaryKey" resultMap="VOResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Columns" />, b.company_id, c.con_no, c.cstm_id 
    from lx_contract_tran_apply a, t_lx_contract b, t_cust_contract c
    where a.lx_con_id=b.id and b.con_id=c.id and a.id = #{id}
  </select>
  
  <select id="selectByLxConId" resultMap="VOResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Columns" />, b.company_id, c.con_no, c.cstm_id 
    from lx_contract_tran_apply a, t_lx_contract b, t_cust_contract c
    where a.lx_con_id=b.id and b.con_id=c.id and a.lx_con_id = #{lxConId}
  </select>
  
  <sql id="queryClause">
  	from lx_contract_tran_apply a, t_lx_contract b, t_cust_contract c
    where a.lx_con_id=b.id and b.con_id=c.id 
    
    <if test="params.tranType != null" >
      and a.tran_type = #{params.tranType}
    </if>
    
    <if test="params.companyId != null" >
      and b.company_id = #{params.companyId}
    </if>
    <if test="params.lxConId != null" >
      and a.lx_con_id = #{params.lxConId}
    </if>
    <if test="params.conNo != null and params.conNo !='' " >
      and c.con_no like #{params.conNo}
    </if>
    <if test="params.statusList != null and params.statusList.size() >0" >
		and a.status in 
		<foreach collection="params.statusList" index="index" item="item" open="(" separator="," close=")">  
	       #{item}
	   </foreach>
	</if>
    <if test="params.approveQuery != null and params.approveQuery" >
      and a.status != 'DRAFT'
    </if>
    <if test="params.aclClause != null and params.aclClause !=''" >
      #{params.aclClause}
    </if>
  </sql>
  
  <select id="countApply" resultType="Integer">
    select count(*) 
    <include refid="queryClause"/>
  </select>
  
  <select id="queryApply" resultMap="VOResultMap" >
    select 
      <include refid="Base_Columns" />, b.company_id, c.con_no, c.cstm_id 
    <include refid="queryClause"/>
    <if test="pager !=null and pager.sort != null">
		order by 
		<foreach collection="pager.sort" item="order" index="index" open="" separator="" close="">
		     ${order.property} ${order.direction}
		</foreach>
	</if>
	<if test="pager == null or pager.sort ==null">
		order by a.created_at desc
	</if>	
	<if test="pager ==null ">	
	  limit 0,1000
	</if>	
	<if test="pager !=null ">	
	limit #{pager.offset}, #{pager.size}
	</if>	
  </select>   
    
</mapper>  