<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.niu.crm.dao.mapper.UserMapper" >
  <resultMap id="BaseResultMap" type="com.niu.crm.model.User" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="gender" property="gender" jdbcType="VARCHAR" />
    <result column="account" property="account" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="unit_id" property="unitId" jdbcType="BIGINT" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="weixin_id" property="weixinId" jdbcType="VARCHAR" />
	<result column="online" property="online" jdbcType="BIT" />
	<result column="enabled" property="enabled" jdbcType="BIT" />
    <result column="creator_id" property="creatorId" jdbcType="BIGINT" />
    <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
    <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
  </resultMap>
  
  <sql id="Base_Columns" >
    id, name, gender,account, password, unit_id, phone, email,weixin_id,
    online, enabled, creator_id, created_at, updated_at
  </sql>
  
  <insert id="insert" parameterType="com.niu.crm.model.User" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_user (
    	name, gender, account,   password, unit_id, 
    	phone, email, weixin_id, creator_id, created_at, updated_at
    )
    values (
    	#{name}, upper(#{gender}), lower(#{account}), #{password}, #{unitId},  
		#{phone}, lower(#{email}), #{weixinId}, #{creatorId}, now(), now()
    )
  </insert>
  
  <update id="update" parameterType="com.niu.crm.model.User" >
    update t_user
	   set name = #{name,jdbcType=VARCHAR},
	   	   gender  = upper(#{gender}), 
	   	   account = lower(#{account}),  
	   	   unit_id = #{unitId}, 
	   	   phone   = #{phone},  
	   	   email   = #{email},
	   	   weixin_id = #{weixinId},
	   	   enabled   = #{enabled},  
	   	   updated_at = now()
     where id = #{id}
  </update>
  <update id="changePwd" >
    update t_user set password = #{password}, updated_at = now()
     where id = #{id}
  </update>
  <update id="updateOnline" >
    update t_user
	   set online = #{online}
    <if test="id != null" >
      where id = #{id}
    </if>  
  </update>
  
  <update id="delete" parameterType="com.niu.crm.model.User" >
    delete from t_user where id = #{id}
  </update>
  
  <select id="selectById" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Columns" />
    from t_user
    where id = #{id}
  </select>
  
  <select id="selectByAccount" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Columns" />
    from t_user
    where account = lower(#{account})
  </select>
  
  <select id="selectByName" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Columns" />
    from t_user
    where name = lower(#{userName})
  </select>

  <select id="countRegistered" parameterType="string" resultType="int">
	select count(*) from t_user where account = lower(#{account})
  </select>
  
  <sql id="queryClause">
  	from t_user a left outer join t_unit b on a.unit_id=b.id 
    where 1=1
    <if test="params.companyId != null" >
      and a.unit_id = #{params.unitId}
    </if>
    <if test="params.unitCode != null and params.unitCode !='' " >
      and (b.code = #{params.unitCode} or b.code like concat(#{params.unitCode},'.%') )
    </if>
    <if test="params.name != null and params.name !='' " >
      and a.name like #{params.name}
    </if>
    <if test="params.account != null and params.account !='' " >
      and a.account like #{params.account}
    </if>
    
    <if test="params.phone != null and params.phone =='NULL' " >
      and a.phone is null
    </if>
    <if test="params.phone != null and params.phone !='' and params.phone !='NULL' " >
      and a.phone like concat(#{params.phone},'%')
    </if>
    <if test="params.gender != null and params.gender !='' " >
      and a.gender = #{params.gender}
    </if>
    <if test="params.online != null" >
      and a.online = #{params.online}
    </if>
    <if test="params.enabled != null" >
      and a.enabled = #{params.enabled}
    </if>
    <if test="params.created_from != null " >
      and a.created_at &gt;= #{params.created_from}
    </if>
    <if test="params.created_to != null " >
      and a.created_at &lt; date_add(#{params.created_to}, interval 1 day)
    </if>
  </sql>  
  
  <select id="queryCount" resultType="Integer">
    select count(*) 
    <include refid="queryClause"/>
  </select>
  
  <select id="query" resultMap="BaseResultMap" >
    select 
      a.id, a.name, a.gender,a.account, a.unit_id, a.phone, a.email, a.weixin_id, a.online, a.enabled,a.created_at
    <include refid="queryClause"/>
    
    <if test="pager != null and pager.sort != null">
		order by 
		<foreach collection="pager.sort" item="order" index="index" open="" separator="" close="">
		     ${order.property} ${order.direction}
		</foreach>
	</if>	
	<if test="pager ==null or pager.sort ==null">
		order by a.created_at desc
	</if>
	
    <if test="pager != null">
	  limit #{pager.offset}, #{pager.size}
	</if>
	<if test="pager == null">
	  limit 15
	</if>	
  </select>
  
  <insert id="addLoginLog" >
    insert into t_login_log (
    	user_id, user_name, from_ip, created_at
    )
    values (
    	#{userId}, #{userName}, #{fromIP}, now()
    )
  </insert>
</mapper>  